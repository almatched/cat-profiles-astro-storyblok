---
import { useStoryblokApi } from "@storyblok/astro";
// @ts-ignore
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";
import BaseLayout from "../layouts/BaseLayout.astro";
import parseUrl from "../utils/parseUrl.ts";
import isPreview from "../utils/isPreview.ts";
import type {
  InferGetStaticParamsType,
  InferGetStaticPropsType,
  GetStaticPaths,
} from "astro";

// use this when ssg, with ssr this will be skipped
import generateStaticPaths from "../utils/generateStaticPaths";
export const getStaticPaths = (async () => {
  return await generateStaticPaths();
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const params = Astro.params as Params;
// this was used when building static pages with Astro instead of vercel
// let props = isPreview() ? parseUrl(params?.slug) : Astro.props
let props: Props = parseUrl(params?.slug);
const { slug, language, langSwitch } = props;

const storyblokApi = useStoryblokApi();
const { data } = await storyblokApi.get(
  `cdn/stories/${slug === undefined ? "home" : slug}`,
  {
    version: isPreview() ? "draft" : "published",
    language,
  }
);
const story = data.story;
---

<BaseLayout
  langSwitch={langSwitch}
  language={language}
  metaTitle={story.content.meta_title}
  metaDescription={story.content.meta_description}
>
  <StoryblokComponent language={language} blok={story.content} />
</BaseLayout>
